version: '3.8'

volumes:
  postgresql_data:
    driver: local
  april2024_rc_sql-data:
    driver: local
  april2024_rc_redis-data:
    driver: local
  april2024_rc_git-data:
    driver: local	
  april2024_rc_zookeeper-data:
    driver: local
  april2024_rc_zookeeper-log:
    driver: local
  april2024_rc_kafka-data:
    driver: local	

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION:-latest}
    container_name: zookeeper-wastemanager-techtest
    ports:
      - "2181:2181"
    restart: unless-stopped
    volumes:
      - april2024_rc_zookeeper-data:/var/lib/zookeeper/data:Z
      - april2024_rc_zookeeper-log:/var/lib/zookeeper/log:Z
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_ADMIN_ENABLE_SERVER: 'false'
    healthcheck:
      test: "exit 0"
    networks:
      - 'dockernetflix-network'

  kafka:
      image: confluentinc/cp-kafka:${CONFLUENT_VERSION:-latest}
      container_name: kafka-wastemanager-techtest
      ports:
        - "9092:9092"
      restart: on-failure
      volumes:
        - april2024_rc_kafka-data:/var/lib/kafka/data:Z
      environment:
        KAFKA_BROKER_ID: '0'
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_NUM_PARTITIONS: '12'
        KAFKA_COMPRESSION_TYPE: 'gzip'
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
        KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-wastemanager-techtest:9092'
        KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
        KAFKA_JMX_PORT: '9091'
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
        KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
        KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      healthcheck:
        test: "exit 0"
      depends_on:
        zookeeper:
          condition: service_healthy
      networks:
        - 'dockernetflix-network'

  schema-registry:
      image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION:-latest}
      container_name: schema-wastemanager-techtest
      ports:
        - "8085:8085"
      restart: on-failure
      depends_on:
        kafka:
          condition: service_healthy
      environment:
        SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
        SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
        SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
        SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'
      healthcheck:
        test: "exit 0"
      networks:
        - 'dockernetflix-network'

  akhq:
    # build:
    #   context: .
    image: tchiotludo/akhq
    container_name: akhq-wastemanager-techtest
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://schema-registry:8085"
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - 8888:8080
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    networks:
      - 'dockernetflix-network'

  zipkin-server:
    image: openzipkin/zipkin:latest
    restart: always
    container_name: zipkin-server-wastemanager-techtest
    hostname: zipkin-server
    healthcheck:
      test: "exit 0"
    ports:
      - '9410:9410'
      - '9411:9411'
    networks:
      - 'dockernetflix-network'

  eureka-server:
    image: april2024/base/server-eureka:latest
    build:
      context: ./eureka-service
      dockerfile: ./src/main/docker/Dockerfile
    restart: always
    container_name: eureka-server-wastemanager-techtest
    hostname: eureka-server
    healthcheck:
      test: "exit 0"
    ports:
      - '8761:8761'
    networks:
      - 'dockernetflix-network'

  config-server:
    image: april2024/base/server-config:latest
    build:
      context: ./config-service
      dockerfile: ./src/main/docker/Dockerfile
    restart: on-failure
    container_name: config-server-wastemanager-techtest
    hostname: config-server
    #network_mode: host
    #extra_hosts:
    #  - "host.docker.internal:127.0.0.1"
    networks:
      - 'dockernetflix-network'
    ports:
      - '8091:8091'
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      management.context-path: /config
      hostName: config-server
      #GIT_HOST: host.docker.internal
      #GIT_PORT: 3000
      EUREKA_HOST: host.docker.internal
      EUREKA_PORT: 8761
      KAFKA_HOST: host.docker.internal
      KAFKA_PORT: 9092
    healthcheck:
      test: "exit 0"

  admin-server:
    image: april2024/base/server-admin:latest
    build:
      context: admin-service
      dockerfile: ./src/main/docker/Dockerfile
    restart: on-failure
    container_name: admin-server-wastemanager-techtest
    hostname: admin-server
    networks:
      - 'dockernetflix-network'
    ports:
      - '8095:8095'
    depends_on:
      eureka-server:
        condition: service_healthy
    environment:
      management.context-path: /admin
      hostName: admin-server
      EUREKA_HOST: host.docker.internal
      EUREKA_PORT: 8761
      GATEWAY_HOST: host.docker.internal
      GATEWAY_PORT: 8080
    healthcheck:
      test: "exit 0"

  gateway-server:
    image: april2024/base/server-gateway:latest
    build:
      context: ./gateway-service
      dockerfile: ./src/main/docker/Dockerfile
    restart: always
    container_name: gateway-server-wastemanager-techtest
    hostname: gateway-server
    networks:
      - 'dockernetflix-network'
    ports:
      - '8080:8080'
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    environment:
      management.context-path: /gateway
      hostName: gateway-server
      CONFIG_HOST: host.docker.internal
      CONFIG_PORT: 8091
      EUREKA_HOST: host.docker.internal
      EUREKA_PORT: 8761
      ZIPKIN_HOST: host.docker.internal
      ZIPKIN_PORT: 9411
    healthcheck:
      test: "exit 0"

networks:
  dockernetflix-network: #necesitamos crear en una red para alojar los servicios en ella y que puedan comunicarse entre s√≠
